%% COMPARE OUTPUT FROM MATLAB CODE AND MICA TOOLBOX
% This script reads in relative quantum catch data generated by the MATLAB code used in this paper and by the MICA toolbox. It 
% then plots the data from the two methods against each other and runs linear regression models to determine how closely the 
% two types of data match. 
% The code is written to work with the VS bird data, and for the user's convenience, the relevant files generated by the
% 'compareCustomComputStatNdim.m' function for VS birds have already been placed in the '4 MATLAB vs MICA/' working directory 
% (from which this script should be run): 'micaVIS.tif', 'micaUV.tif', 'q_statistical_nat.mat', and 'q_statistical_chart1.mat'. Also in 
% this working directory are the relative quantum catch data files calculated using the MICA toolbox: 'q_statistical_nat_MICA.csv' 
% and 'q_statistical_chart1_MICA.csv'.

close all
clear
%% statistical, natural spectra
filename1 = 'q_statistical_nat.mat';
filename2 = 'q_statistical_nat_MICA';

load(filename1);
mica = readtable(filename2);

micaVsum = mica.V_mean + mica.Sv_mean + mica.M_mean + mica.L_mean;

V = mica.V_mean ./ micaVsum;
Sv = mica.Sv_mean ./ micaVsum;
Mv = mica.M_mean ./ micaVsum;
Lv = mica.L_mean ./ micaVsum;

micaV = horzcat(V,Sv,Mv,Lv);

matV = q_statistical_nat.';
numPatches = size(matV,1);

figure
subplot(2,1,1)
x = [0 1];
y = x;
plot(x,y,'k')
hold on
colors = [0.8 0 1; 0 0.6 1; 0 0.8 0; 1 0 0]; % plotting colors for VS birds
for p = 1:numPatches
    for i = 1:4
        scatter(matV(p,i), micaV(p,i), 40, '.', 'MarkerEdgeColor', colors(i,:))
    end
end
xlabel('MATLAB')
ylabel('MICA')
axis square
xticks(0:0.2:1)

matAll = reshape(matV, numel(matV), 1);
micaAll = reshape(micaV, numel(micaV), 1);
lmNat = fitlm(matAll, micaAll)
save('lmNat.mat', 'lmNat', '-mat')

%% statistical, chart
filename1 = 'q_statistical_chart1.mat';
filename2 = 'q_statistical_chart1_MICA';

load(filename1);
mica = readtable(filename2);

micaVsum = mica.V_mean + mica.Sv_mean + mica.M_mean + mica.L_mean;

V = mica.V_mean ./ micaVsum;
Sv = mica.Sv_mean ./ micaVsum;
Mv = mica.M_mean ./ micaVsum;
Lv = mica.L_mean ./ micaVsum;

micaV = horzcat(V, Sv,Mv,Lv);

matV = q_statistical_chart1.';
numPatches = size(matV,1);

subplot(2,1,2)
x = [0 1];
y = x;
plot(x,y,'k')
hold on
for p = 1:numPatches
    for i = 1:4
        scatter(matV(p,i), micaV(p,i), 40, '.', 'MarkerEdgeColor', colors(i,:))
    end
end
xlabel('MATLAB')
ylabel('MICA')
axis square
xticks(0:0.2:1)
set(gcf, 'Position', [1 600 240 430])

matAll = reshape(matV, numel(matV), 1);
micaAll = reshape(micaV, numel(micaV), 1);
lmChart = fitlm(matAll, micaAll)
save('lmChart.mat', 'lmChart', '-mat')

print('MATvMICA.png', '-dpng', '-r600')
savefig('MATvMICA.fig')
