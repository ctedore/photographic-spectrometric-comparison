function R2 = compareCustomComputStatNdim 
%% METHODS COMPARISON
% This function reads in the files the user previously generated with the scripts in the '1 Computational Filters/' and '2 Statistical Filters/' directories, and uses them to compare the different 
% spectrophotometric and imaging methods. The script outputs the following items, all of which are saved to file: 
% 1) grayscale images of each filter (before conversion to relative quantum catch or receptor excitation) showing over- and under-exposed pixels in purple 
% 2) grayscale images of each filter (before conversion to relative quantum catch or receptor excitation) showing results of alignment procedure (to check that alignment is good before proceeding)
% 3) scatterplots of relative quantum catch, chroma, and color contrast comparing each method to ground truth
% 4) associated R2 values
% 5) .mat files containing relative quantum catch, chroma, and color contrast data generated by each method
% 6) difference images comparing the different imaging techniques to one of the best photographic estimates of ground truth
% 7) monochromatic images of each camera and photoreceptor channel (normalized by gray standard and transformed by p=p/(p+1)), named using numbers in order from shortest-
%     to longest-wavelength receptor
% 8) false-color images combining various images from #5
% 9) for VS birds only, false-color images combining relative quantum catch images, normalized to sum to 1
% 10) RGB combinations of the computational Nikon camera filters that can be used in the MICA toolbox to check whether the cone mapping results and resulting relative quantum catches
%     computed by the two types of code (MATLAB and MICA toolbox) are equivalent. These files are named 'micaVIS.tif' (contains vR, vG, and vB channels) and 'micaUV.tif' (contains uR and 
%     uB channels). 
% The user must input the desired parameters in the 'User adjustable parameters' section below.
% This function should be run within the directory of images you want to compare, e.g., 'Pastels Images/' or 'Bird Specimen Images/Alcedo atthis insipida adult male/'
clear 
close all
%% USER ADJUSTABLE PARAMETERS 
loadPrealignedWorkspace = 1; % set to 1 to load previously saved workspace ('workspace.mat') in which images already aligned
animal = 'VSbird'; % use the 'animal' parameter from the 'computFilters_2.m' script
chromacy = 4; % the number of photoreceptor classes of the animal being modeled
VISonly = 0; % set to 1 if animal has fewer than 4 photoreceptor classes and lacks a UV-peaking receptor (used to decide how to plug channels into false-color images)
spectrumUsed = 'UVVIS'; % determines which Nikon camera channels should be used to build statistical filter images; can be 'VIS' or 'UVVIS'
colors = [0.8 0 1; 0 0.6 1; 0 0.8 0; 1 0 0]; % colors for relative quantum catch scatter plots. Colors listed in order from shortest- to longest-wavelength peaking photoreceptor  
loadGS = 1; % if you already selected the gray standard when running this script previously, it has been saved to file ('grayStandardPosition.mat'). To load this file rather than select it again, set loadGS = 1
loadSelect = 1; % set to 1 if you previously ran this script on the same images and want to load your previous patch selections (which were saved to file as 'select.mat')
selectWhole = 1; % set to 1 to select entire bird rather than individual color patches
highlightSelectedPix = 1; % save an image showing which pixels were programmatically chosen to be analyzed (only works when selectWhole = 1)
buff = 0; % if selectWhole = 1, number of pixels around each pixel to average
numSamples = 48; % number of evenly-spaced points to sample across bird when selectWhole = 1 and useSubset = 1
inclRadiance = 0; % set to 1 if the images being analyzed have corresponding radiance measurements. Warning: code currently written such that inclRadiance and inclReflectance must both be set to the same value (0 or 1)
inclReflectance = 0; % set to 1 if the images being analyzed have corresponding reflectance measurements. Warning: code currently written such that inclRadiance and inclReflectance must both be set to the same value (0 or 1) 
inclChart1 = 1; % set to 1 to include statistical filters employing the 24-color chart method (should be set to 1 when running the script on either the pastels or bird images)
inclChart2 = 1; % set to 1 to include statistical filters employing the chart method again but using an alternative chart -- i.e., the pastels (should be set to 1 only when running the script on the bird images)
removeDark = 0; % set to 1 to remove low relative q pixels
desaturateDark = 0; % set to 1 to desaturate low relative q pixels 
q_threshold = 0.2; % threshold relative quantum catch below which to exclude (uses max across channels) or desaturate (uses mean across channels) depending on which option set to 1 above). 
trainingSet = 'orig'; % can be 'expanded' or 'orig'. 'expanded' expands training library of statistical filters to include simulated reflectance spectra of different intensities
topDir = ''; % specify full path of directory above '3 Comparison of All FIlters/' directory
scatterPlots = 0; % set to 1 to plot comparisons in scatter plots
reflectLightSrc = 'same'; % to use the same light source (Seric) for reflectance measurement and modeling, set to 'same'; to use a different light source (PX-2) for measurement, set to 'diff'

%% other parameters; for advanced users only
gsRefl = 0.2; % gray standard reflectance you want to use/simulate (actual used is 0.2)
qUnity = 1; % set to 1 to normalize relative quantum catches to sum to 1 (should always be 1 if inclRadiance = 1 and/or inclReflectance = 1). if qUnity = 0, script terminates after q calculations as rest of script not written to accommodate non-normalized cone catches
normAcrossAll = 0; % set to 1 to normalize all developed receptor excitation images to the same max; 0 to normalize each set to its own max
lampSpecFilename = [topDir, '/Seric_AbsoluteIrradiance_12-38-16-170.txt']; % Seric lamp irradiance spectrum (lamp used to illuminate specimens)
radDir = [topDir, '3 Comparison of All Filters/Pastels Radiance Spectra/AbsoluteIrradiance*.txt']; % radiance spectra directory
if strcmp(reflectLightSrc, 'same')
    reflDir = [topDir, 'Reflectance Spectra/Pastels Reflectance Spectra Seric/Reflection*.txt']; % reflectance spectra directory
elseif strcmp(reflectLightSrc, 'diff')
    reflDir = [topDir, 'Reflectance Spectra/Pastels Reflectance Spectra PX-2/Reflection*.txt'];
end
animalSensFilename = [topDir, animal, '_idealizedSens300-780.mat']; % idealized animal spectral sensitivities
% Statistical Filters Cone mapping files:
coneMappingFilenames = {[topDir, '2 Statistical Filters/', animal, spectrumUsed, 'Mapping_naturalSpectra_', trainingSet, '.mat']; % to train with great tit spectra only, replace 'naturalSpectra' with 'greatTitSpectra' 
                                      [topDir, '2 Statistical Filters/', animal, spectrumUsed, 'Mapping_chart_Seric_', trainingSet, '.mat'];
                                      [topDir, '2 Statistical Filters/', animal, spectrumUsed, 'Mapping_pastels_Seric_', trainingSet, '.mat']
                                      };
% Computational Filter Coefficient Files:
% idealized bird 
animalCoeffFilename = [topDir, '1 Computational Filters/', animal, 'ComputFilterCoeffs.mat'];
% Nikon D7000 with CoastalOpt 60 mm lens
camCoeffFilename = [topDir, '1 Computational Filters/NikonD7000CoastalOpt60ComputFilterCoeffs.mat'];
EOfilterPos = 8; % position of blank spot in filterwheel camera allowing photography through bandpass filter mounted on front of lens
birdFilterPos = 1:6; % location of bird filters in wheel, assuming the numbers correspond in the order they are listed to this order: U, V, Su, Sv, M, and L
hdrLevels = 2; % only works with 2
bird1start = 16 * hdrLevels + 1; % where in the entire sequence of photos taken the 1st hdr level (shorter exposure times) of bird photos begin
bird2start = 16 * hdrLevels + 7; % where in the entire sequence of photos taken the 2nd hdr level (longer exposure times) of bird photos begin
% delete first photograph in every subfolder (bug in camera/camera software results in this image always being overexposed):
imgFiles2delete = dir('**/Image_I0000*.tiff');
for i = 1:numel(imgFiles2delete)
    delete([imgFiles2delete(i).folder, '/', imgFiles2delete(i).name])
end
imgFiles = dir('**/Image*.tiff'); % directory of image files to read in
metaFiles = dir('**/Metadata*.txt'); % directory of associated metadata files to read in
numFilters = 22; % total number of filters being used (Edmund Optics bandpass + custom bird)
numEOfilters = 16; % number of Edmund Optics bandpass filters being used
markerShape = '.'; % marker shape in scatter plots
sz = 40; % marker size in q scatter plots
szChr = 37; % marker size in chroma scatter plots
szdS = 25; % marker size in color contrast scatter plots
%%
if loadPrealignedWorkspace == 1
    load('workspace.mat')
else
    %% READ EXPOSURE TIMES
    % EO filters
    for f = 1:numEOfilters*hdrLevels
        fID = fopen([metaFiles(f).folder, '/', metaFiles(f).name]);
        textscan(fID,'%f %f','HeaderLines',17+4*(EOfilterPos - 1));
        metadata = textscan(fID,'%*s %*f %*s %*s %f4.2',1);
        exposures(f) = metadata{1};
        fclose(fID);
    end
    index = f + 1;

    % bird filters
    bird1metaStart = numEOfilters * hdrLevels + 1;
    bird2metaStart = bird1metaStart + 1;
    for f = bird1metaStart:bird2metaStart
        fID = fopen([metaFiles(f).folder, '/', metaFiles(f).name]);
        textscan(fID,'%f %f','HeaderLines',17+4*(birdFilterPos(1) - 1));
        for i = 1:6
            metadata = textscan(fID,'%*s %*f %*s %*s %f4.2',1);
            exposures(index) = metadata{1};
            textscan(fID, '%*s %*f %*s %*s %*f1.1',1);
            textscan(fID, '%s %f %*s %*s %*s %f',1);
            textscan(fID, '%s %f %*s %*s',1);
            if birdFilterPos(i) < 6
                numToSkip = birdFilterPos(i+1) - birdFilterPos(i) - 1;
                for s = 1:numToSkip
                    textscan(fID,'%*s %*f %*s %*s %f4.2',1);
                    textscan(fID, '%*s %*f %*s %*s %*f1.1',1);
                    textscan(fID, '%s %f %*s %*s %*s %f',1);
                    textscan(fID, '%s %f %*s %*s',1);
                end
            end
            index = index + 1;
        end
        fclose(fID);
    end

    % calculate hdr factors
    for i = 1:hdrLevels
        EOexpos(i,:) = exposures(i:hdrLevels:numEOfilters*hdrLevels);
    end
    EOhdrFactors = EOexpos(2,:) ./ EOexpos(1,:);
    birdExpos(1,:) = exposures(bird1start:bird1start+5);
    birdExpos(2,:) = exposures(bird2start:bird2start+5);
    birdHDRfactors = birdExpos(2,:) ./ birdExpos(1,:);
    
    %% REMOVE DARK NOISE, CHECK DIAGNOSTICS
    % preallocation
    darkNoise = zeros(numFilters*hdrLevels,1);
    maxVal = zeros(numFilters*hdrLevels,1);
    minVal = zeros(numFilters*hdrLevels,1);
    numOverExp = zeros(numFilters*hdrLevels,1);
    numUnderExp = zeros(numFilters*hdrLevels,1);
    maxPoss = zeros(numFilters*hdrLevels,1);
    startimg = cell(numFilters*hdrLevels,1);
    mydata=cell(1,numFilters*hdrLevels);
    
    for k = 1:numFilters*hdrLevels
        mydata{k} = imread([imgFiles(k).folder, '/', imgFiles(k).name]);
        mydata{k} = double(mydata{k})-32768; % converts 16 bit image into 10 bit image
    
        noise = mydata{k}(:,1393:1408);
        darkNoise(k) = ceil(mean2(noise)); % calculates dark noise in each channel 
        mydata{k} = mydata{k}(5:1040,1:1392); % eliminates unused pixels from further processing
        yDim = size(mydata{k},1);
        xDim = size(mydata{k},2);
        numOverExp(k) = sum(mydata{k}(:) == 1023);
        numUnderExp(k) = sum(mydata{k}(:) <= darkNoise(k));
        
        mydata{k} = mydata{k} - darkNoise(k); % subtracts dark noise
        mydata{k}(mydata{k}(:) < 0) = 0; % converts neg numbers (noise) to zero
        
        maxVal(k) = max(max(mydata{k}));
        minVal(k) = min(min(mydata{k}));
        
        maxPoss(k) = 1023 - darkNoise(k);

        startimg{k} = mydata{k}/maxPoss(k);
        filename = sprintf('unprocImg_%d.png', k);
        imwrite(startimg{k}, filename, 'png');
    end
    
    img = (1:numFilters*hdrLevels).';
    diagnosticsTbl = table(img, darkNoise, numUnderExp, numOverExp, minVal, maxVal, maxPoss)

    %% CONVERT TO HDR % this must be done before alignment as alignment changes max vals slightly
    if hdrLevels > 1
        % EO filters
        f = 1; % hdr factor index
        for k = hdrLevels:hdrLevels:numEOfilters*hdrLevels
            if k == 2 && EOhdrFactors(1) == 1 % if was hard to get enough light for BP 300 filter & thus both shots through this filter had the max exposure possible
                mydata{2} = (mydata{2} + mydata{1}) / 2; % then add these two shots together and divide by 2 (will decrease number of underexposed pixels)
            end
            for i = 1:yDim
                for j = 1:xDim
                    if mydata{k}(i,j) == maxPoss(k) && mydata{k-1}(i,j) < maxPoss(k-1)
                        mydata{k}(i,j) = EOhdrFactors(f) * mydata{k-1}(i,j);
                    end
                end
            end
            f = f + 1;
        end
        
        % bird filters
        f = 1; % hdr factor index
        for k = bird2start:bird2start+5
            for i = 1:yDim
                for j = 1:xDim
                    if mydata{k}(i,j) == maxPoss(k) && mydata{k-6}(i,j) < maxPoss(k-6)
                        mydata{k}(i,j) = birdHDRfactors(f) * mydata{k-6}(i,j);
                    end
                end
            end
            f = f + 1;
        end
    end
    mydata = horzcat(mydata(hdrLevels:hdrLevels:numEOfilters*hdrLevels), mydata(bird2start:bird2start+5));
    maxPoss = maxPoss(hdrLevels:hdrLevels:numFilters*hdrLevels);

    %% WRITE IMAGES TO CHECK FOR OVER- OR UNDER-EXP0SURE IN ROIs: writes grayscale images of each filter image with over- and under-exposed pixels highlighted in purple.
    for k = 1:numFilters
        mydataCheck = cat(3, mydata{k}, mydata{k}, mydata{k});
        mydataCheck = mydataCheck / max(max(max(mydataCheck)));
        for x = 1:yDim
            for y = 1:xDim
                if mydata{k}(x,y) == maxPoss(k) || mydata{k}(x,y) == 0
                    mydataCheck(x,y,:) = [1 0 1];
                end
            end
        end
        filename = sprintf('exposCheck_%d.png', k);
        imwrite(mydataCheck, filename, 'png');
    end

    %% ALIGN IMAGES
    % USING FUNCTION GENERATED BY 'registrationEstimator' app
    %registrationEstimator(mydata{6}, mydata{5}); 
    for i = 1:numEOfilters-1
        % order: moving, fixed
        mydata{i+1} = registerImages(mydata{i+1}, mydata{i}); 
        % compareImgs(mydata{i+1}, mydata{i})
    end
    mydata{17} = registerImages(mydata{17}, mydata{4});
    % compareImgs(mydata{17}, mydata{8})
    mydata{18} = registerImages(mydata{18}, mydata{5});
    % compareImgs(mydata{18}, mydata{10})
    mydata{19} = registerImages(mydata{19}, mydata{6});
    % compareImgs(mydata{19}, mydata{6})
    mydata{20} = registerImages(mydata{20}, mydata{7});
    % compareImgs(mydata{20}, mydata{7})
    mydata{21} = registerImages(mydata{21}, mydata{10});
    % compareImgs(mydata{21}, mydata{10})
    mydata{22} = registerImages(mydata{22}, mydata{14});
    % compareImgs(mydata{22}, mydata{14})

    %% REMOVE UNDER- AND OVER-EXPOSED PIXELS 
    % inserts NaN into under- and over-exposed pixels (across all images)
    % For isolated pixels, only works on 1st fixed image from alignment proces. Works for large groups of pixels in other images. 
    % Be sure to visually check locations of isolated over- or under-exposure in all other filter images to ensure that none of these pixels fall within the analyzed regions (see 'exposCheck_2.png', 'exposCheck_3.png', etc.).
    for k = 1:numFilters
        for x = 1:yDim
            for y = 1:xDim
                if abs(mydata{k}(x,y) - maxPoss(k)) < 0.00001 
                    for j = 1:numFilters
                        mydata{j}(x,y) = NaN;
                    end
                elseif abs(mydata{k}(x,y) - 0) < 0.00001 
                    for j = 1:numFilters
                        mydata{j}(x,y) = NaN;
                    end
                end
            end
        end
    end

    %% CHECK THAT IMAGES WELL-ALIGNED
    for k = 1:numFilters
        mydataCheck = mydata{k} / max(max(mydata{k}));
        filename = sprintf('alignCheck_%d.png', k);
        imwrite(mydataCheck, filename, 'png')
    end

    save('workspace.mat', 'mydata', 'EOexpos', 'xDim', 'yDim')
end

%% SPECIFY INDICES OF ALL CHANNELS
% compensation for chart1 if only mapping visible channels of an animal that has a UV-peaking photoreceptor (e.g., using 24-color camera calibration chart to map only the S, M, and L channels of a tetrachromatic bird)
load(coneMappingFilenames{1})
numChans = length(lm);
load(coneMappingFilenames{2})
numChansChart1 = length(lm);
indexAdjustChart1 = numChansChart1 - numChans;
% difference in photoreceptor number between target animal and 4
indexAdjust = numChans - 4;
% Filter indices:
birdU_real = 17;
birdV_real = 18;
birdSu_real = 19;
birdSv_real = 20;
birdM_real =21;
birdL_real = 22;
v1_ideal = 23;
v2_ideal = 24;
v3_ideal = 25;
v4_ideal = 26;
Nikon1 = 27 + indexAdjust; %R
Nikon2 = 28 + indexAdjust; %G
Nikon3 = 29 + indexAdjust; %B
Nikon4 = 30 + indexAdjust; %UB
Nikon5 = 31 + indexAdjust; %UR 
statistical1_nat = 32 + indexAdjust;
statistical2_nat = 33 + indexAdjust; 
statistical3_nat = 34 + indexAdjust; 
statistical4_nat = 35 + indexAdjust;  
newIndexAdjust = 2 * indexAdjust;
statistical1_chart1 = 36 + newIndexAdjust; 
statistical2_chart1 = 37 + newIndexAdjust;  
statistical3_chart1 = 38 + newIndexAdjust; 
statistical4_chart1 = 39 + newIndexAdjust; 
newIndexAdjust = 3 * indexAdjust + indexAdjustChart1; 
statistical1_chart2 = 40 + newIndexAdjust;  
statistical2_chart2 = 41 + newIndexAdjust;
statistical3_chart2 = 42 + newIndexAdjust;
statistical4_chart2 = 43 + newIndexAdjust;

%% GENERATE VIRTUAL FILTERS
% load virtual filter coefficient files
load(animalCoeffFilename);
animalCoeffSet = coeffSet;
load(camCoeffFilename);
camCoeffSet = coeffSet; 
coeffSet = horzcat(animalCoeffSet, camCoeffSet);
% Adjust photos to all have same effective exposures
mydata_exposCorr = cell(1,numEOfilters);
exposCorr = 2000 ./ EOexpos(2,:);
for i = 1:numEOfilters
    mydata_exposCorr{i} = mydata{i} * exposCorr(i);
end
% Build virtual filters
numVirtFilts = size(coeffSet,2);
myVirtualData = cell(1,numVirtFilts);
for i = 1:numVirtFilts
    myVirtualData{i} = zeros(yDim, xDim);
    for j = 1:numEOfilters
        myVirtualData{i} = myVirtualData{i} + coeffSet(j,i) * mydata_exposCorr{j};
    end
end
% concatenate real and virtual filters
allData = horzcat(mydata, myVirtualData);
totalChans = numFilters + size(coeffSet,2);

%% SELECT GRAY STANDARD
if loadGS == 0
    h = figure;
    imgToDispl = cat(3, allData{22}, allData{12}, allData{1});
    for i = 1:3
        chan_i = imgToDispl(:,:,i);
        chan_i = chan_i / mean(chan_i(~isnan(chan_i)));
        imgToDispl(:,:,i) = chan_i ./ (chan_i + 1);
    end
    imgToDispl = imgToDispl / max(max(max(imgToDispl)));
    imshow(imgToDispl);
    message = sprintf('Left click vertices defining gray standard.\nThen double click in the middle to accept it.');
    uiwait(msgbox(message));
    [gsSelect, xi, yi] = roipoly();
    hold on
    plot(xi, yi, 'r-', 'LineWidth', 2);
    pause(0.2)
    close(h)
    pause(0.1)
    save grayStandardPosition.mat gsSelect
else
    load('grayStandardPosition.mat')
end

%% WHITE BALANCE
for k = 1:totalChans
    wStand = allData{k}(gsSelect);
    wStand = wStand(~isnan(wStand));
    wStand = mean(wStand);
    gsAdjust = gsRefl / 0.2; % uses gsRefl value to simulate diff reflectance than the one actually used in the photos (which was always 0.2)
    wStand = wStand * gsAdjust;
    allData{k} = allData{k} / wStand;
end

%% STATISTICAL FILTERS
% virtual Nikon filters
R = allData{Nikon1};
G = allData{Nikon2};
B = allData{Nikon3};
UB = allData{Nikon4};
UR = allData{Nikon5};

% make images to try out in actual mica toolbox 
micaVIS = zeros(1036, 1392, 3);
micaVIS(:,:,1) = R;
micaVIS(:,:,2) = G;
micaVIS(:,:,3) = B;
micaUV = zeros(1036, 1392, 3);
micaUV(:,:,1) = UR;
micaUV(:,:,3) = UB;

maxVal = max([max(max(max(micaVIS))) max(max(max(micaUV)))]);
micaVIS = micaVIS / maxVal;
micaUV = micaUV / maxVal;

imwrite(micaVIS, 'micaVIS.tif')
imwrite(micaUV, 'micaUV.tif')

% build statistical filters
if inclChart1 == 0 && inclChart2 == 0
    coneMappingFilenames = coneMappingFilenames(1);
elseif inclChart1 == 1 && inclChart2 == 0
    coneMappingFilenames = coneMappingFilenames(1:2);
end    
numCones = zeros(1, length(coneMappingFilenames));
iter = 1;
for k = 1:length(coneMappingFilenames)
    load(coneMappingFilenames{k})
    numCones(k) = length(lm);
    % model with all possible 2-way interactions
    for i = 1:numCones(k)
        if (k == 2 && numCones(k) - numCones(k-1) == -1) || strcmp(spectrumUsed, 'VIS')
            allData{Nikon5+iter} = lm{i}.Coefficients.Estimate(1) + ...
                                        lm{i}.Coefficients.Estimate(2) * R + ...
                                        lm{i}.Coefficients.Estimate(3) * G + ...
                                        lm{i}.Coefficients.Estimate(4) * B + ...
                                        lm{i}.Coefficients.Estimate(5) * R.*G + ...
                                        lm{i}.Coefficients.Estimate(6) * R.*B + ...
                                        lm{i}.Coefficients.Estimate(7) * G.*B;
        else
            allData{Nikon5+iter} = lm{i}.Coefficients.Estimate(1) + ...
                                        lm{i}.Coefficients.Estimate(2) * R + ...
                                        lm{i}.Coefficients.Estimate(3) * G + ...
                                        lm{i}.Coefficients.Estimate(4) * B + ...
                                        lm{i}.Coefficients.Estimate(5) * UB + ...
                                        lm{i}.Coefficients.Estimate(6) * UR + ...
                                        lm{i}.Coefficients.Estimate(7) * R.*G + ...
                                        lm{i}.Coefficients.Estimate(8) * R.*B + ...
                                        lm{i}.Coefficients.Estimate(9) * G.*B + ...
                                        lm{i}.Coefficients.Estimate(10) * R.*UB + ...
                                        lm{i}.Coefficients.Estimate(11) * G.*UB + ...
                                        lm{i}.Coefficients.Estimate(12) * B.*UB + ...
                                        lm{i}.Coefficients.Estimate(13) * R.*UR + ...
                                        lm{i}.Coefficients.Estimate(14) * G.*UR + ...
                                        lm{i}.Coefficients.Estimate(15) * B.*UR + ...
                                        lm{i}.Coefficients.Estimate(16) * UB.*UR;
        end
        iter = iter + 1;
    end
end
totalChans = size(allData,2);

%% CONVERT NEGATIVE VALUES OF STATISTICAL FILTERS TO ZERO
for i = statistical1_nat:totalChans
    count = 0;
    for y = 1:1036
        for x = 1:1392
            if allData{i}(y,x) <= 0
                count = count+1; % counts the number of negative values in each image (for informational purposes only)
                allData{i}(y,x) = 0.000001; % prevents NaN if all photoreceptor q are zero when normalized to unity
            end
        end
    end
    count; % remove semicolon to see results
end

%% DESATURATE DARK PIXELS OF STATISTICAL FILTERS
if desaturateDark == 1
    for i = statistical1_nat:numChans:totalChans
        imgs = [];
        for j = 1:numChans
            imgs = cat(3, imgs, allData{i+j-1});
        end
        imgMaxes = max(imgs, [], 3);
        imgSums = sum(imgs, 3);
        for y = 1:1036
            for x = 1:1392
                if imgSums(y,x) / numChans < q_threshold
                    imgs(y,x,:) = repmat(imgSums(y,x) / numChans, 1, 1, numChans);
                end
            end
        end
        for j = 1:numChans
            allData{i+j-1} = imgs(:,:,j);
        end
    end
end

%% SELECT COLOR PATCHES FOR METHODS COMPARISON
if loadSelect == 1
    load('select.mat');
else
    h = figure;
    imgToDispl = cat(3, allData{16}, allData{10}, allData{1});
    for i = 1:3
        chan_i = imgToDispl(:,:,i);
        chan_i = chan_i / mean(chan_i(~isnan(chan_i)));
        imgToDispl(:,:,i) = chan_i ./ (chan_i + 1);
    end
    imshow(imgToDispl);
    if selectWhole == 1
        message = sprintf('Left click vertices defining region the the bird is in.\nThen double click in the middle to accept it.');
        uiwait(msgbox(message));
        pause
        [select, xi, yi] = roipoly();
        hold on
        plot(xi, yi, 'r-', 'LineWidth', 2);
    else
        iter = 1;
        message = sprintf('Zoom and pan to see region of interest clearly and then press any key. Single click vertices defining the region of interest.\nThen double click in the middle to accept it. ');
        uiwait(msgbox(message));
        again = true;
        pause
        while again
            [select(:,:,iter), xi, yi] = roipoly();
            iter = iter + 1;
            hold on
            plot(xi, yi, 'r-', 'LineWidth', 2);
            pause
            promptMessage = sprintf('Draw region #%d in the image or Quit?', iter);
            titleBarCaption = 'Continue?';
            button = questdlg(promptMessage, titleBarCaption, 'Draw', 'Quit', 'Draw');
            if strcmpi(button, 'Quit')
                break;
            end
        end
    end
    print('select.png', '-dpng', '-r600')
    close(h)
    save('select.mat', 'select', '-mat')
end

%% CALC q, chroma, color contrast FROM RADIANCE MEASURED BY SPECTROMETER 
% Specify Adapting Spectrum
fID = fopen(lampSpecFilename);
w = (300:780).';
adaptSpec = extractSpec(fID, w, 1);
% load idealized bird sensitivities
load(animalSensFilename)   

if inclRadiance == 1
    % extract radiance spectra
    files = dir(radDir);
    numFiles = numel(files);
    rad = zeros(481,numFiles);
    for i = 1:numFiles
        fID = fopen([files(i).folder, '/', files(i).name]);
        rad(:,i) = extractSpec(fID, w, 1);
    end
    
    % calculate relative quantum catches q
    q_rad = zeros(numChans,numFiles);
    for p = 1:numFiles
        for i = 1:numChans
            q_rad(i,p) = sum(rad(:,p) .* idealizedSens(:,i)) / sum(gsRefl * adaptSpec .* idealizedSens(:,i)); 
        end
    end
    
    % convert to sum to unity (1)
    if qUnity == 1
        q_rad = q_rad ./ sum(q_rad);
    end

    % save
    save('q_rad.mat', 'q_rad', '-mat')
end
  
%% CALC q, chroma, color contrast FROM REFLECTANCE MEASURED BY SPECTROMETER
if inclReflectance == 1
    % extract reflectance spectra
    files = dir(reflDir);
    numFiles = numel(files);
    refl = zeros(481,numFiles);
    for i = 1:numFiles
        fID = fopen([files(i).folder, '/', files(i).name]);
        refl(:,i) = extractSpec(fID, w, 0) / 100;
    end

    q_refl = zeros(numChans,numFiles);
    for p = 1:numFiles
        for i = 1:numChans
            q_refl(i,p) = sum(refl(:,p) .* adaptSpec .* idealizedSens(:,i)) / sum(gsRefl * adaptSpec .* idealizedSens(:,i)); 
        end
    end
    
    % convert to sum to unity (1)
    if qUnity == 1
        q_refl = q_refl ./ sum(q_refl);
    end

    % save
    save('q_refl.mat', 'q_refl', '-mat')
end

%% COMPARE METHODS
if strcmp(animal, 'UVSbird') 
    realFilts = horzcat(allData(birdU_real), allData(birdSu_real), allData(birdM_real), allData(birdL_real));
elseif strcmp(animal, 'VSbird')
    realFilts = horzcat(allData(birdV_real), allData(birdSv_real), allData(birdM_real), allData(birdL_real));
end
virtFiltsIdeal = allData(v1_ideal : v1_ideal+numChans-1);
statisticalFilts_nat = allData(statistical1_nat : statistical1_nat+numChans-1);
if inclChart1 == 1
    statisticalFilts_chart1 = allData(statistical1_chart1 : statistical1_chart1+numChansChart1-1);
end
if inclChart2 == 1
    statisticalFilts_chart2 = allData(statistical1_chart2 : statistical1_chart2+numChans-1);
end

%% PREPARE q DATA
if selectWhole == 1 
    % reduce number of patches to ~numSamples evenly-spaced pixels across the entire bird:
    if highlightSelectedPix == 1
        selectedPtImg = cat(3, allData{22}, allData{21}, allData{17});
        for i = 1:3
            chan_i = selectedPtImg(:,:,i);
            chan_i = chan_i / mean(chan_i(~isnan(chan_i)));
            selectedPtImg(:,:,i) = chan_i ./ (chan_i + 1);
        end
    end

    gridSide = sqrt(sum(sum(select)));
    gridSpacing = round(gridSide / sqrt(numSamples));
    
    iter = 1;
    for i = gridSpacing:gridSpacing:1036
        for j = gridSpacing:gridSpacing:1392
            imgGrid = false(1036, 1392);
            if select(i,j) == true
                
                if highlightSelectedPix == 1
                    selectedPtImg(i,j,1) = 1;
                    selectedPtImg(i,j,2) = 0;
                    selectedPtImg(i,j,3) = 1;
                end
                
                imgGrid(i-buff:i+buff, j-buff:j+buff) = true;
                select3D(:,:,iter) = imgGrid;
                iter = iter + 1;
            end
        end
    end

    if highlightSelectedPix == 1
        imwrite(selectedPtImg, 'selectedPixelsImage.png')
    end

    select = select3D;
end

% preallocation
numPatches = size(select, 3)
q_real = zeros(numChans,numPatches);
q_16 = zeros(numChans,numPatches);
q_statistical_nat = zeros(numChans,numPatches);
q_statistical_chart1 = zeros(numChansChart1,numPatches);
q_statistical_chart2 = zeros(numChans,numPatches);
for s = 1:numPatches
    for i = 1:numChans
        if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
            q = realFilts{i}(select(:,:,s));
            q_real(i,s) = mean(q(~isnan(q)));
        end
        
        q = virtFiltsIdeal{i}(select(:,:,s));
        q_16(i,s) = mean(q(~isnan(q)));
        
        q = statisticalFilts_nat{i}(select(:,:,s));
        q_statistical_nat(i,s) = mean(q(~isnan(q)));

        if inclChart1 == 1 && i <= numChansChart1
            q = statisticalFilts_chart1{i}(select(:,:,s));
            q_statistical_chart1(i,s) = mean(q(~isnan(q)));
        end

        if inclChart2 == 1
            q = statisticalFilts_chart2{i}(select(:,:,s));
            q_statistical_chart2(i,s) = mean(q(~isnan(q)));
        end
     end
end

% Explore & remove dark color patches
% calculate maximum q across all photoreceptor classes for each selected color patch
q_16_max = max(q_16);

% plot histogram of max q for each patch
% h = histogram(q_16_max, 15, 'FaceColor', 'k');
% h.BinWidth = 0.1;
% xticks(0:1:9)
% xlim([-0.1 9.3])
% set(gcf, 'Position', [1 1 484 92]);
% savefig('histogram_q16max.fig')
% print('histogram_q16max.png', '-dpng', '-r600')
% close

% remove dark patches from analysis
if removeDark == 1
    logic = q_16_max > q_threshold;
    numDiscarded = numPatches - sum(logic);
    save('removeDarkInfo.mat', 'q_threshold', 'numDiscarded', 'numPatches')
    percUsable = sum(logic) / numPatches
    numPatches = sum(logic);
    if inclRadiance == 1
        q_rad = q_rad(:,logic);
        q_refl = q_refl(:,logic);
        q_real = q_real(:,logic);
    end
    q_16 = q_16(:, logic);
    q_statistical_nat = q_statistical_nat(:, logic);
    q_statistical_chart1 = q_statistical_chart1(:, logic);
    q_statistical_chart2 = q_statistical_chart2(:, logic);
end

% convert cone catches to sum to 1
if qUnity == 1
    if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
        q_real = q_real ./ sum(q_real);
    end
    q_16 = q_16 ./ sum(q_16); 
    q_statistical_nat = q_statistical_nat ./ sum(q_statistical_nat);
    if inclChart1 == 1
        q_statistical_chart1 = q_statistical_chart1 ./ sum(q_statistical_chart1);
    end
    if inclChart2 == 1
        q_statistical_chart2 = q_statistical_chart2 ./ sum(q_statistical_chart2);
    end
end

%% q SCATTER PLOT
% define reference for comparison:
if inclRadiance == 1
    q_reference = q_rad;
else
    q_reference = q_16;
end
% generate q_reference for chart1
if numChansChart1 < numChans
    q_reference1 = q_reference(2:end,:);
    if qUnity == 1
        q_reference1 = q_reference1 ./ sum(q_reference1);
    end
else
    q_reference1 = q_reference;
end
if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
    subplotAdjust = 1;
else
    subplotAdjust = 0;
end
YsubplotNum = 1 + subplotAdjust + inclRadiance + inclReflectance + inclChart1 + inclChart2; % number of vertically-tiled subplots
statNatNum = 1+ subplotAdjust + inclRadiance + inclReflectance; % number of subplot of statNat filters plot

if scatterPlots == 1
   figure
    for s = 1:numPatches
        for i = 1:numChans
            % reference vs reflectance
            if inclReflectance == 1
                subplot(YsubplotNum,1,1)
                scatter(q_reference(i,s), q_refl(i,s), sz, markerShape, 'MarkerEdgeColor', colors(i,:))
                hold on
            end
    
            if inclRadiance == 1
                if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
                    % reference vs real
                    subplot(YsubplotNum,1,2)
                    scatter(q_reference(i,s), q_real(i,s), sz, markerShape, 'MarkerEdgeColor', colors(i,:))
                    hold on
                end

                % reference vs 16
                subplot(YsubplotNum,1,2+subplotAdjust)
                scatter(q_reference(i,s), q_16(i,s), sz, markerShape, 'MarkerEdgeColor', colors(i,:))
                hold on
            end
    
            % reference vs statistical trained on natural spectra
            subplot(YsubplotNum,1,statNatNum)
            scatter(q_reference(i,s), q_statistical_nat(i,s), sz, markerShape, 'MarkerEdgeColor', colors(i,:))
            hold on
    
            % reference vs statistical trained on chart1 spectra
            if inclChart1 == 1
                subplot(YsubplotNum,1,statNatNum+1)
                if numChansChart1 < numChans
                    colorIndex = i + 1;
                else
                    colorIndex = i;
                end
                    
                if numChansChart1 < numChans && i == numChans 
                else    
                    scatter(q_reference1(i,s), q_statistical_chart1(i,s), sz, markerShape, 'MarkerEdgeColor', colors(colorIndex,:))
                    hold on
                end
            end
    
            % radiance vs statistical trained on chart2 spectra
            if inclChart2 == 1
                subplot(YsubplotNum,1,statNatNum+2)
                scatter(q_reference(i,s), q_statistical_chart2(i,s), sz, markerShape, 'MarkerEdgeColor', colors(i,:))
                hold on
            end
        end
    end
    
    x = [0 1]; 
    y = x;
    for i = 1:YsubplotNum
        subplot(YsubplotNum,1,i)
        plot(x,y, 'k'); axis square
        xlim([0 x(2)]); ylim([0 x(2)])
        xticks(0:0.2:x(2)); yticks(0:0.2:x(2))
        set(gca, 'FontSize', 8)
    end
    set(gcf, 'Position', [1 600 240 215*YsubplotNum])
    print('plot_q.png', '-dpng', '-r600')
    savefig('plot_q.fig')
    pause(1)
end

%% SAVE q DATA
if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
    save('q_real.mat', 'q_real', '-mat')
end
save('q_16.mat', 'q_16', '-mat')
save('q_statistical_nat.mat', 'q_statistical_nat', '-mat')
if inclChart1 == 1
    save('q_statistical_chart1.mat', 'q_statistical_chart1', '-mat')
    save('q_reference1.mat', 'q_reference1', '-mat')
end
if inclChart2 == 1
    save('q_statistical_chart2.mat', 'q_statistical_chart2', '-mat')
end

%% R-SQUARED q
% reshape
if inclRadiance == 1
    q_rad_reshaped = reshape(q_rad, numel(q_rad), 1);
end
if inclReflectance == 1
    q_refl_reshaped = reshape(q_refl, numel(q_refl), 1);
end
if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
    q_real_reshaped = reshape(q_real, numel(q_real), 1);
end
q_16_reshaped = reshape(q_16, numel(q_16), 1);
q_statistical_nat_reshaped = reshape(q_statistical_nat, numel(q_statistical_nat), 1);
if inclChart1 == 1
    q_statistical_chart1_reshaped = reshape(q_statistical_chart1, numel(q_statistical_chart1), 1);
end
if inclChart2 == 1
    q_statistical_chart2_reshaped = reshape(q_statistical_chart2, numel(q_statistical_chart2), 1);
end

% define reference for comparison
if inclRadiance == 1
    q_ref_reshaped = q_rad_reshaped;
else
    q_ref_reshaped = q_16_reshaped;
end
% define  reference for comparison to chart1
q_ref1_reshaped = reshape(q_reference1, numel(q_reference1), 1);
% run models
if inclReflectance == 1
    lm = fitlm(q_ref_reshaped, q_refl_reshaped);
    R2.refl.q = lm.Rsquared.Ordinary;
end
if inclRadiance == 1
    if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
        lm = fitlm(q_ref_reshaped, q_real_reshaped);
        R2.real.q = lm.Rsquared.Ordinary;
    end
    lm = fitlm(q_ref_reshaped, q_16_reshaped);
    R2.f16.q = lm.Rsquared.Ordinary;
end
lm = fitlm(q_ref_reshaped, q_statistical_nat_reshaped);
R2.stat_nat.q = lm.Rsquared.Ordinary;
if inclChart1 == 1
    lm = fitlm(q_ref1_reshaped, q_statistical_chart1_reshaped);
    R2.stat_chart1.q = lm.Rsquared.Ordinary;
end
if inclChart2 == 1
    lm = fitlm(q_ref_reshaped, q_statistical_chart2_reshaped);
    R2.stat_chart2.q = lm.Rsquared.Ordinary;
end

% terminates script if qUnity = 0 (since qUnity must be 1 for subsequent calcs)
if qUnity == 0
    return
end

%% PREPARE CHROMA DATA
% preallocation
chromaRefl = zeros(numPatches, 1);
chromaRad = zeros(numPatches, 1);
chromaReal = zeros(numPatches, 1);
chroma16 = zeros(numPatches, 1);
chromaStatistical_nat = zeros(numPatches, 1);
chromaStatistical_chart1 = zeros(numPatches, 1);
chromaStatistical_chart2 = zeros(numPatches, 1);
dim = numChans - 1;
coordsRefl = zeros(numPatches, dim);
coordsRad = zeros(numPatches, dim);
coordsReal = zeros(numPatches, dim);
coords16 = zeros(numPatches, dim);
coordsStatistical_nat = zeros(numPatches, dim);
coordsStatistical_chart1 = zeros(numPatches, numChansChart1 - 1);
coordsStatistical_chart2 = zeros(numPatches, dim);
for s = 1:numPatches
    if inclReflectance == 1
        [chromaRefl(s), coordsRefl(s,:)] = colorSpace(q_refl(:,s));
    end

    if inclRadiance == 1
        [chromaRad(s), coordsRad(s,:)] = colorSpace(q_rad(:,s));
        
        if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
            [chromaReal(s), coordsReal(s,:)] = colorSpace(q_real(:,s));
        end
    end   

    [chroma16(s), coords16(s,:)] = colorSpace(q_16(:,s));

    [chromaStatistical_nat(s), coordsStatistical_nat(s,:)] = colorSpace(q_statistical_nat(:,s));

    if inclChart1 == 1
        [chromaStatistical_chart1(s), coordsStatistical_chart1(s,:)] = colorSpace(q_statistical_chart1(:,s));
    end

    if inclChart2 == 1
        [chromaStatistical_chart2(s), coordsStatistical_chart2(s,:)] = colorSpace(q_statistical_chart2(:,s));
    end
end

%% CHROMA PLOT
% DEFINE REFERENCE FOR COMPARISON: 
if inclRadiance == 1
    chroma_reference = chromaRad;
    coords_reference = coordsRad;
else
    chroma_reference = chroma16;
    coords_reference = coords16;
end

% reference for comparison to chart1
chroma_reference1 = zeros(numPatches, 1);
coords_reference1 = zeros(numPatches, numChansChart1 - 1);
if numChansChart1 < numChans
    for s = 1:numPatches
        [chroma_reference1(s), coords_reference1(s,:)] = colorSpace(q_reference1(:,s));
    end
else
    chroma_reference1 = chroma_reference;
    coords_reference1 = coords_reference;
end
    
if scatterPlots == 1
    figure
    if inclReflectance == 1
        subplot(YsubplotNum,1,1)
        scatter(chroma_reference, chromaRefl, szChr, 'k', markerShape)
        hold on
    end
    
    if inclRadiance == 1
        % real
        if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
            subplot(YsubplotNum,1,2)
            scatter(chroma_reference, chromaReal, szChr, 'k', markerShape)
            hold on
        end

        % computational
        subplot(YsubplotNum,1,2+subplotAdjust)
        scatter(chroma_reference, chroma16, szChr, 'k', markerShape) 
        hold on
    end
    
    % statistical filters - trained on natural spectra
    subplot(YsubplotNum,1,statNatNum)
    scatter(chroma_reference, chromaStatistical_nat, szChr, 'k', markerShape) 
    hold on
    
    % statistical filters - trained on chart spectra
    if inclChart1 == 1
        subplot(YsubplotNum,1,statNatNum+1)
        scatter(chroma_reference1, chromaStatistical_chart1, szChr, 'k', markerShape) 
        hold on
    end

    % statistical filters - trained on chart spectra
    if inclChart2 == 1
        subplot(YsubplotNum,1,statNatNum+2)
        scatter(chroma_reference, chromaStatistical_chart2, szChr, 'k', markerShape) 
        hold on
    end
    
    x = [0 0.87]; 
    y = x;
    for i = 1:YsubplotNum
        subplot(YsubplotNum,1,i)
        plot(x,y, 'k'); axis square
        xlim([0 x(2)]); ylim([0 x(2)])
        xticks(0:0.2:x(2)); yticks(0:0.2:x(2))
        set(gca, 'FontSize', 8)
    end
    set(gcf, 'Position', [1 300 240 215*YsubplotNum])
    print('plot_chroma.png', '-dpng', '-r600')
    savefig('plot_chroma.fig')
    pause(1)
end

%% SAVE CHROMA DATA
if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
    save('chromaReal.mat', 'chromaReal', '-mat')
    save('coordsReal.mat', 'coordsReal', '-mat')
end
save('chroma16.mat', 'chroma16', '-mat')
save('coords16.mat', 'coords16', '-mat')
save('chromaStatistical_nat.mat', 'chromaStatistical_nat', '-mat')
save('coordsStatistical_nat.mat', 'coordsStatistical_nat', '-mat')

if inclRadiance == 1
    save('chromaRad.mat', 'chromaRad', '-mat')
    save('coordsRad.mat', 'coordsRad', '-mat')
end

if inclReflectance == 1
    save('chromaRefl.mat', 'chromaRefl', '-mat')
    save('coordsRefl.mat', 'coordsRefl', '-mat')
end

if inclChart1 == 1
    save('chromaStatistical_chart1.mat', 'chromaStatistical_chart1', '-mat')
    save('coordsStatistical_chart1.mat', 'coordsStatistical_chart1', '-mat')
    save('chroma_reference1.mat', 'chroma_reference1', '-mat')
    save('coords_reference1.mat', 'coords_reference1', '-mat')
end

if inclChart2 == 1
    save('chromaStatistical_chart2.mat', 'chromaStatistical_chart2', '-mat')
    save('coordsStatistical_chart2.mat', 'coordsStatistical_chart2', '-mat')
end

%% R-SQUARED CHROMA
if inclReflectance == 1
    lm = fitlm(chroma_reference, chromaRefl);
    R2.refl.chroma = lm.Rsquared.Ordinary;
end
if inclRadiance == 1
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        lm = fitlm(chroma_reference, chromaReal);
        R2.real.chroma = lm.Rsquared.Ordinary;
    end
    lm = fitlm(chroma_reference, chroma16);
    R2.f16.chroma = lm.Rsquared.Ordinary;
end
lm = fitlm(chroma_reference, chromaStatistical_nat);
R2.stat_nat.chroma = lm.Rsquared.Ordinary;
if inclChart1 == 1
    lm = fitlm(chroma_reference1, chromaStatistical_chart1);
    R2.stat_chart1.chroma = lm.Rsquared.Ordinary;
end
if inclChart2 == 1
    lm = fitlm(chroma_reference, chromaStatistical_chart2);
    R2.stat_chart2.chroma = lm.Rsquared.Ordinary;
end

%% PREPARE COLOR CONTRAST DATA
patchComb = nchoosek(1:numPatches, 2); % patch combos
numCombos = size(patchComb,1);
deltaS_rad = zeros(numCombos, 1);
deltaS_refl = zeros(numCombos, 1);
deltaS_real = zeros(numCombos, 1);
deltaS_16 = zeros(numCombos, 1);
deltaS_statistical_nat = zeros(numCombos, 1);
deltaS_statistical_chart1 = zeros(numCombos, 1);
deltaS_statistical_chart2 = zeros(numCombos, 1);
for i = 1:numCombos
    % reflectance
    if inclReflectance == 1
        patch1 = coordsRefl(patchComb(i,1), :);
        patch2 = coordsRefl(patchComb(i,2), :);
        deltaS_refl(i) = euclidDist(patch1, patch2);
    end
    % radiance
    if inclRadiance == 1
        patch1 = coordsRad(patchComb(i,1), :);
        patch2 = coordsRad(patchComb(i,2), :);
        deltaS_rad(i) = euclidDist(patch1, patch2);
    end
    % real
    if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
        patch1 = coordsReal(patchComb(i,1), :);
        patch2 = coordsReal(patchComb(i,2), :);
        deltaS_real(i) = euclidDist(patch1, patch2);
    end
    % 16 filters
    patch1 = coords16(patchComb(i,1), :);
    patch2 = coords16(patchComb(i,2), :);
    deltaS_16(i) = euclidDist(patch1, patch2);
    % statistical - trained on natural spectra
    patch1 = coordsStatistical_nat(patchComb(i,1), :);
    patch2 = coordsStatistical_nat(patchComb(i,2), :);
    deltaS_statistical_nat(i) = euclidDist(patch1, patch2);
    % statistical - trained on chart1 spectra
    if inclChart1 == 1
        patch1 = coordsStatistical_chart1(patchComb(i,1), :);
        patch2 = coordsStatistical_chart1(patchComb(i,2), :);
        deltaS_statistical_chart1(i) = euclidDist(patch1, patch2);
    end
    % statistical - trained on chart2 spectra
    if inclChart2 == 1
        patch1 = coordsStatistical_chart2(patchComb(i,1), :);
        patch2 = coordsStatistical_chart2(patchComb(i,2), :);
        deltaS_statistical_chart2(i) = euclidDist(patch1, patch2);
    end
end

%% COLOR CONTRAST SCATTER PLOT
% define reference for comparison:
if inclRadiance == 1
    deltaS_reference = deltaS_rad;
else
    deltaS_reference = deltaS_16;
end
% define reference for comparison to chart1
if numChansChart1 < numChans
    deltaS_reference1 = zeros(numCombos, 1);
    for i = 1:numCombos
        patch1 = coords_reference1(patchComb(i,1), :);
        patch2 = coords_reference1(patchComb(i,2), :);
        deltaS_reference1(i) = euclidDist(patch1, patch2);
    end
else
    deltaS_reference1 = deltaS_reference;
end
    
if scatterPlots == 1
    figure
    if inclReflectance == 1
        subplot(YsubplotNum, 1, 1)
        scatter(deltaS_reference, deltaS_refl, szdS, 'k', markerShape)
        hold on
    end
    
    if inclRadiance == 1
        % real
        if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
            subplot(YsubplotNum, 1, 2)
            scatter(deltaS_reference, deltaS_real, szdS, 'k', markerShape)
            hold on
        end

        % f16
        subplot(YsubplotNum,1,2+subplotAdjust)
        scatter(deltaS_reference, deltaS_16, szdS, 'k', markerShape)
        hold on
    end            
            
    % statistical - trained on natural spectra
    subplot(YsubplotNum,1,statNatNum)
    scatter(deltaS_reference, deltaS_statistical_nat, szdS, 'k', markerShape)
    hold on
            
    % statistical - trained on chart1 spectra
    if inclChart1 == 1
        subplot(YsubplotNum,1,statNatNum+1)
        scatter(deltaS_reference1, deltaS_statistical_chart1, szdS, 'k', markerShape)
        hold on
    end

    % statistical - trained on chart2 spectra
    if inclChart2 == 1
        subplot(YsubplotNum,1,statNatNum+2)
        scatter(deltaS_reference, deltaS_statistical_chart2, szdS, 'k', markerShape)
        hold on
    end
    
    x = [0 sqrt(2)]; 
    y = x;
    for i = 1:YsubplotNum
        subplot(YsubplotNum,1,i)
        plot(x,y, 'k'); axis square
        xticks(0:0.3:x(2)); yticks(0:0.3:x(2))
        xlim([0 x(2)]); ylim([0 x(2)])
        set(gca, 'FontSize', 7)
    end
    set(gcf, 'Position', [1 1 240 215*YsubplotNum])
    print('plot_deltaS.png', '-dpng', '-r600')
    savefig('plot_deltaS.fig')
end

%% SAVE COLOR CONTRAST DATA
if inclRadiance == 1
    save('deltaS_rad.mat', 'deltaS_rad', '-mat')
end
if inclReflectance == 1
    save('deltaS_refl.mat', 'deltaS_refl', '-mat')
end
if (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')) && inclRadiance == 1
    save('deltaS_real.mat', 'deltaS_real', '-mat')
end
save('deltaS_16.mat', 'deltaS_16', '-mat')
save('deltaS_statistical_nat.mat', 'deltaS_statistical_nat', '-mat')
if inclChart1 == 1
    save('deltaS_statistical_chart1.mat', 'deltaS_statistical_chart1', '-mat')
    save('deltaS_reference1.mat', 'deltaS_reference1', '-mat')
end
if inclChart2 == 1
    save('deltaS_statistical_chart2.mat', 'deltaS_statistical_chart2', '-mat')
end
    
%% R-SQUARED COLOR CONTRAST
if inclReflectance == 1
    lm = fitlm(deltaS_reference, deltaS_refl);
    R2.refl.deltaS = lm.Rsquared.Ordinary;
end
if inclRadiance == 1
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        lm = fitlm(deltaS_reference, deltaS_real);
        R2.real.deltaS = lm.Rsquared.Ordinary;
    end
    lm = fitlm(deltaS_reference, deltaS_16);
    R2.f16.deltaS = lm.Rsquared.Ordinary;
end
lm = fitlm(deltaS_reference, deltaS_statistical_nat);
R2.stat_nat.deltaS = lm.Rsquared.Ordinary;
if inclChart1 == 1
    lm = fitlm(deltaS_reference1, deltaS_statistical_chart1);
    R2.stat_chart1.deltaS = lm.Rsquared.Ordinary;
end
if inclChart2 == 1
    lm = fitlm(deltaS_reference, deltaS_statistical_chart2);
    R2.stat_chart2.deltaS = lm.Rsquared.Ordinary;
end

% display all R2 values 
if inclReflectance == 1
    disp(R2.refl);
end
if inclRadiance == 1
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        disp(R2.real);
    end
    disp(R2.f16)
end
disp(R2.stat_nat)
if inclChart1 == 1
    disp(R2.stat_chart1)
end
if inclChart2 == 1
    disp(R2.stat_chart2)
end

save('R2.mat', 'R2', '-mat')
    
%% DEVELOP DIFFERENCE IMAGES     
% preallocation of images normalized to unity
realFiltsNorm = cell(1, numChans);
virtFiltsIdealNorm = cell(1, numChans);
statisticalFilts_natNorm = cell(1, numChans);
statisticalFilts_chart1Norm = cell(1, numChansChart1);
statisticalFilts_chart2Norm = cell(1, numChans);
% preallocation of diff imgs
diffImg16 = zeros(yDim, xDim, numChans);
diffImgStatistical_nat = zeros(yDim, xDim, numChans);
diffImgStatistical_chart1 = zeros(yDim, xDim, numChansChart1);
diffImgStatistical_chart2 = zeros(yDim, xDim, numChans);
% image sums for normalization to unity
realFiltsSum = zeros(yDim, xDim, 1);
virtFiltsIdealSum = zeros(yDim, xDim, 1);
statisticalFilts_natSum = zeros(yDim, xDim, 1);
statisticalFilts_chart1Sum = zeros(yDim, xDim, 1);
statisticalFilts_chart2Sum = zeros(yDim, xDim, 1);
for i = 1:numChans
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        realFiltsSum = realFiltsSum + realFilts{i};
    end
    virtFiltsIdealSum = virtFiltsIdealSum + virtFiltsIdeal{i};
    statisticalFilts_natSum = statisticalFilts_natSum + statisticalFilts_nat{i};
    if inclChart1 == 1
        if numChansChart1 < numChans && i == numChans
        else
            statisticalFilts_chart1Sum = statisticalFilts_chart1Sum + statisticalFilts_chart1{i};
        end
    end
    if inclChart2 == 1
        statisticalFilts_chart2Sum = statisticalFilts_chart2Sum + statisticalFilts_chart2{i};
    end
end
% normalization to unity
for i = 1:numChans
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        realFiltsNorm{i} = realFilts{i} ./ realFiltsSum;
    end
    virtFiltsIdealNorm{i} = virtFiltsIdeal{i} ./ virtFiltsIdealSum;
    statisticalFilts_natNorm{i} = statisticalFilts_nat{i} ./ statisticalFilts_natSum;
    if inclChart1 == 1
        if numChansChart1 < numChans && i == numChans
        else
            statisticalFilts_chart1Norm{i} = statisticalFilts_chart1{i} ./ statisticalFilts_chart1Sum;
        end
    end
    if inclChart2 == 1
        statisticalFilts_chart2Norm{i} = statisticalFilts_chart2{i} ./ statisticalFilts_chart2Sum;
    end
end

% define reference for comparison
if inclRadiance == 1 && (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird'))
    referenceFiltsNorm = realFiltsNorm;
else
    referenceFiltsNorm = virtFiltsIdealNorm;
end
% define trichromatic reference for comparison to chart1
if inclChart1 == 1 
    if numChans > numChansChart1
        reference1FiltsSum = zeros(yDim, xDim, 1);
        for i = 2:numChans
            reference1FiltsSum = reference1FiltsSum + referenceFiltsNorm{i};
        end
        reference1FiltsNorm = cell(1,numChansChart1);
        for i =  1:numChansChart1
            reference1FiltsNorm{i} = referenceFiltsNorm{i+1} ./ reference1FiltsSum;
        end
    else
        reference1FiltsNorm = referenceFiltsNorm;
    end
end

for i = 1:numChans
    % f16
    if inclRadiance == 1 && (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird'))
        diffImg16(:,:,i) = abs((virtFiltsIdealNorm{i} - referenceFiltsNorm{i}) ./ referenceFiltsNorm{i});
    end
    % statistical - trained on natural spectra
    diffImgStatistical_nat(:,:,i) = abs((statisticalFilts_natNorm{i} - referenceFiltsNorm{i}) ./ referenceFiltsNorm{i});
    % statistical - trained on chart spectra
    if inclChart1 == 1
        if numChans > numChansChart1 && i == numChans
        else
            diffImgStatistical_chart1(:,:,i) = abs((statisticalFilts_chart1Norm{i} - reference1FiltsNorm{i}) ./ reference1FiltsNorm{i});
        end
    end
    if inclChart2 == 1
        diffImgStatistical_chart2(:,:,i) = abs((statisticalFilts_chart2Norm{i} - referenceFiltsNorm{i}) ./ referenceFiltsNorm{i});
    end
end

if inclRadiance == 1 && (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird'))
    diffImg16 = 1 - diffImg16;
    diffImg16(isnan(diffImg16)) = 1;
end
diffImgStatistical_nat = 1 - diffImgStatistical_nat;
diffImgStatistical_nat(isnan(diffImgStatistical_nat)) = 1;
if inclChart1 == 1
    diffImgStatistical_chart1 = 1 - diffImgStatistical_chart1;
    diffImgStatistical_chart1(isnan(diffImgStatistical_chart1)) = 1;
end
if inclChart2 == 1
    diffImgStatistical_chart2 = 1 - diffImgStatistical_chart2;
    diffImgStatistical_chart2(isnan(diffImgStatistical_chart2)) = 1;
end

% write diff imgs to file
for i = 1:numChans
    % f16
    if inclRadiance == 1 && (strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird'))
        imwrite(diffImg16(:,:,i), ['diffImg16_', num2str(i), '.png'])
    end
    % statistical filters trained on natural spectra
    imwrite(diffImgStatistical_nat(:,:,i), ['diffImgStatistical_nat_', num2str(i), '.png'])
    % statistical filters trained on chart spectra
    if inclChart1 == 1
        if numChansChart1 < numChans && i == numChans
        else
            imwrite(diffImgStatistical_chart1(:,:,i), ['diffImgStatistical_chart1_', num2str(i), '.png'])
        end
    end
    if inclChart2 == 1
        imwrite(diffImgStatistical_chart2(:,:,i), ['diffImgStatistical_chart2_', num2str(i), '.png'])
    end
end

%% SINGLE CHANNEL IMAGES
% nonlinear transformation
for k = 1:totalChans
    allData{k} = allData{k} ./ (allData{k} + 1);
end

% normalize channels to max across all channels to make full use of computer screen's dynamic range
% make lists of indices in allData to be normalized
if strcmp(animal, 'UVSbird') 
    indices_for_realMaxVals = [birdU_real, birdSu_real, birdM_real, birdL_real];
elseif strcmp(animal, 'VSbird')
    indices_for_realMaxVals = [birdV_real, birdSv_real, birdM_real, birdL_real];
end
indices_for_f16maxVals = [v1_ideal : v1_ideal+numChans-1];
indices_for_statnatMaxVals = [statistical1_nat : statistical1_nat+numChans-1];
if inclChart1 == 1
    indices_for_chart1maxVals = [statistical1_chart1 : statistical1_chart1+numChansChart1-1];
end
if inclChart2 == 1
    indices_for_chart2maxVals = [statistical1_chart2 : statistical1_chart2+numChans-1];
end

if normAcrossAll == 0
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        allData = normalizeImgs(allData, indices_for_realMaxVals);
    end
    allData = normalizeImgs(allData, indices_for_f16maxVals);
    allData = normalizeImgs(allData, indices_for_statnatMaxVals);
    if inclChart1 == 1
        allData = normalizeImgs(allData, indices_for_chart1maxVals);
    end
    if inclChart2 == 1
        allData = normalizeImgs(allData, indices_for_chart2maxVals);
    end
else  
    indices_for_maxVals = [indices_for_f16maxVals, indices_for_statnatMaxVals];
    if inclChart1 == 1
        indices_for_maxVals = [indices_for_maxVals, indices_for_chart1maxVals];
    end
    if inclChart2 == 1
        indices_for_maxVals = [indices_for_maxVals, indices_for_chart2maxVals];
    end
    if strcmp(animal, 'UVSbird') || strcmp(animal, 'VSbird')
        indices_for_maxVals = [indices_for_realMaxVals, indices_for_maxVals];
    end
    allData = normalizeImgs(allData, indices_for_maxVals);
end

% calc max EO filter vals & normalize images
max_vals = zeros(16,1);
for k = 1:16
    max_vals(k) = max(max(allData{k}));
end
max_for_norm = max(max_vals);
for k = 1:16
    allData{k} = allData{k} / max_for_norm;
end

% calc max Nikon filter vals & normalize images
max_vals = zeros(5,1);
iter = 1;
for k = Nikon1:Nikon5
    max_vals(iter) = max(max(allData{k}));
    iter = iter + 1;
end
max_for_norm = max(max_vals);
for k = Nikon1:Nikon5
    allData{k} = allData{k} / max_for_norm;
end

% save channel images
% EO filters
indices = 1:16;
developMono('EOfilter', allData, indices)
% real bird filters
if strcmp(animal, 'UVSbird') 
    indices = [birdU_real, birdSu_real, birdM_real, birdL_real];
    developMono('birdReal', allData, indices)
elseif strcmp(animal, 'VSbird')
    indices = [birdV_real, birdSv_real, birdM_real, birdL_real];
    developMono('birdReal', allData, indices)
end
% f16
indices = v1_ideal : v1_ideal+numChans-1;
developMono('vbirdIdeal', allData, indices)
% Nikon
indices = Nikon1:Nikon5;
developMono('vNikon', allData, indices)
% statNat
indices = statistical1_nat : statistical1_nat+numChans-1;
developMono('statistical_nat', allData, indices)
if inclChart1 == 1
    indices = statistical1_chart1 : statistical1_chart1+numChansChart1-1;
    developMono('statistical_chart1', allData, indices)
end
if inclChart2 == 1
    indices = statistical1_chart2 : statistical1_chart2+numChans-1;
    developMono('statistical_chart2', allData, indices)
end

%% FALSE-COLOR IMAGES
% for viewing pleasure only; DO NOT USE FOR QUANTITATIVE ANALYSIS

RGB =zeros(yDim,xDim,3);
% real filters
RGB(:,:,1)=allData{birdL_real};
RGB(:,:,2)=allData{birdM_real};
if strcmp(animal, 'UVSbird')
    RGB(:,:,3)=allData{birdSu_real};
    imwrite(RGB, 'LMS_birdReal.png')
    RGB(:,:,3)=allData{birdU_real};
    imwrite(RGB, 'LMU_birdReal.png')
end
if strcmp(animal, 'VSbird')
    RGB(:,:,3)=allData{birdSv_real};
    imwrite(RGB, 'LMS_birdReal.png')
    RGB(:,:,3)=allData{birdV_real};
    imwrite(RGB, 'LMU_birdReal.png')
    % normalized images (brightness removed)
    imageSum = realFiltsNorm{4} + realFiltsNorm{3} + realFiltsNorm{2};
    RGB(:,:,1)=realFiltsNorm{4} ./ imageSum;
    RGB(:,:,2)=realFiltsNorm{3} ./ imageSum;
    RGB(:,:,3)=realFiltsNorm{2} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMSnorm_birdReal.png')
    imageSum = realFiltsNorm{4} + realFiltsNorm{3} + realFiltsNorm{1};
    RGB(:,:,1)=realFiltsNorm{4} ./ imageSum;
    RGB(:,:,2)=realFiltsNorm{3} ./ imageSum;
    RGB(:,:,3)=realFiltsNorm{1} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMUnorm_birdReal.png')
end

if chromacy == 4
    % virtual filters
    RGB(:,:,1)=allData{v4_ideal};
    RGB(:,:,2)=allData{v3_ideal};
    RGB(:,:,3)=allData{v2_ideal};
    imwrite(RGB, 'LMS_vIdeal.png')
    RGB(:,:,3)=allData{v1_ideal};
    imwrite(RGB, 'LMU_vIdeal.png')
    % normalized images (brightness removed)
    imageSum = virtFiltsIdealNorm{4} + virtFiltsIdealNorm{3} + virtFiltsIdealNorm{2};
    RGB(:,:,1)=virtFiltsIdealNorm{4} ./ imageSum;
    RGB(:,:,2)=virtFiltsIdealNorm{3} ./ imageSum;
    RGB(:,:,3)=virtFiltsIdealNorm{2} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMSnorm_vIdeal.png')
    imageSum = virtFiltsIdealNorm{4} + virtFiltsIdealNorm{3} + virtFiltsIdealNorm{1};
    RGB(:,:,1)=virtFiltsIdealNorm{4} ./ imageSum;
    RGB(:,:,2)=virtFiltsIdealNorm{3} ./ imageSum;
    RGB(:,:,3)=virtFiltsIdealNorm{1} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMUnorm_vIdeal.png')
    
    % statistical filters (natural spectra)
    RGB(:,:,1)=allData{statistical4_nat};
    RGB(:,:,2)=allData{statistical3_nat};
    RGB(:,:,3)=allData{statistical2_nat};
    imwrite(RGB, 'LMS_statistical_nat.png')
    RGB(:,:,3)=allData{statistical1_nat};
    imwrite(RGB, 'LMU_statistical_nat.png')
    % normalized images (brightness removed)
    imageSum = statisticalFilts_natNorm{4} + statisticalFilts_natNorm{3} + statisticalFilts_natNorm{2};
    RGB(:,:,1)=statisticalFilts_natNorm{4} ./ imageSum;
    RGB(:,:,2)=statisticalFilts_natNorm{3} ./ imageSum;
    RGB(:,:,3)=statisticalFilts_natNorm{2} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMSnorm_statistical_nat.png')
    imageSum = statisticalFilts_natNorm{4} + statisticalFilts_natNorm{3} + statisticalFilts_natNorm{1};
    RGB(:,:,1)=statisticalFilts_natNorm{4} ./ imageSum;
    RGB(:,:,2)=statisticalFilts_natNorm{3} ./ imageSum;
    RGB(:,:,3)=statisticalFilts_natNorm{1} ./ imageSum;
    RGB = RGB / max(max(max(RGB)));
    imwrite(RGB, 'LMUnorm_statistical_nat.png')
    
    % statistical filters (chart1)
    if inclChart1 == 1
        if numChansChart1 == 4
            RGB(:,:,1)=allData{statistical4_chart1};
            RGB(:,:,2)=allData{statistical3_chart1};
            RGB(:,:,3)=allData{statistical2_chart1};
            imwrite(RGB, 'LMS_statistical_chart1.png')
            RGB(:,:,3)=allData{statistical1_chart1};
            imwrite(RGB, 'LMU_statistical_chart1.png')
            % normalized images (brightness removed)
            imageSum = statisticalFilts_chart1Norm{4} + statisticalFilts_chart1Norm{3} + statisticalFilts_chart1Norm{2};
            RGB(:,:,1)=statisticalFilts_chart1Norm{4} ./ imageSum;
            RGB(:,:,2)=statisticalFilts_chart1Norm{3} ./ imageSum;
            RGB(:,:,3)=statisticalFilts_chart1Norm{2} ./ imageSum;
            RGB = RGB / max(max(max(RGB)));
            imwrite(RGB, 'LMSnorm_statistical_chart1.png')
            imageSum = statisticalFilts_chart1Norm{4} + statisticalFilts_chart1Norm{3} + statisticalFilts_chart1Norm{1};
            RGB(:,:,1)=statisticalFilts_chart1Norm{4} ./ imageSum;
            RGB(:,:,2)=statisticalFilts_chart1Norm{3} ./ imageSum;
            RGB(:,:,3)=statisticalFilts_chart1Norm{1} ./ imageSum;
            RGB = RGB / max(max(max(RGB)));
            imwrite(RGB, 'LMUnorm_statistical_chart1.png')
        elseif numChansChart1 == 3
            RGB(:,:,1)=allData{statistical3_chart1};
            RGB(:,:,2)=allData{statistical2_chart1};
            RGB(:,:,3)=allData{statistical1_chart1};
            imwrite(RGB, 'LMS_statistical_chart1.png')
        end
    end
    
    % statistical filters (chart2)
    if inclChart2 == 1
        RGB(:,:,1)=allData{statistical4_chart2};
        RGB(:,:,2)=allData{statistical3_chart2};
        RGB(:,:,3)=allData{statistical2_chart2};
        imwrite(RGB, 'LMS_statistical_chart2.png')
        RGB(:,:,3)=allData{statistical1_chart2};
        imwrite(RGB, 'LMU_statistical_chart2.png')
        % normalized images (brightness removed)
        imageSum = statisticalFilts_chart2Norm{4} + statisticalFilts_chart2Norm{3} + statisticalFilts_chart2Norm{2};
        RGB(:,:,1)=statisticalFilts_chart2Norm{4} ./ imageSum;
        RGB(:,:,2)=statisticalFilts_chart2Norm{3} ./ imageSum;
        RGB(:,:,3)=statisticalFilts_chart2Norm{2} ./ imageSum;
        RGB = RGB / max(max(max(RGB)));
        imwrite(RGB, 'LMSnorm_statistical_chart2.png')
        imageSum = statisticalFilts_chart2Norm{4} + statisticalFilts_chart2Norm{3} + statisticalFilts_chart2Norm{1};
        RGB(:,:,1)=statisticalFilts_chart2Norm{4} ./ imageSum;
        RGB(:,:,2)=statisticalFilts_chart2Norm{3} ./ imageSum;
        RGB(:,:,3)=statisticalFilts_chart2Norm{1} ./ imageSum;
        RGB = RGB / max(max(max(RGB)));
        imwrite(RGB, 'LMUnorm_statistical_chart2.png')
    end

elseif chromacy == 3
    % virtual filters
    if VISonly == 1 || strcmp(animal, 'Habronattus')
        RGB(:,:,1)=allData{v3_ideal};
        RGB(:,:,2)=allData{v2_ideal};
        RGB(:,:,3)=allData{v1_ideal};
        if strcmp(animal, 'Habronattus')
            imwrite(RGB, 'LMU_vIdeal.png')
        else
            imwrite(RGB, 'LMS_vIdeal.png')
        end
    elseif strcmp(animal, 'honeybee')
        RGB(:,:,1)=allData{v1_ideal};
        RGB(:,:,2)=allData{v3_ideal};
        RGB(:,:,3)=allData{v2_ideal};
        imwrite(RGB, 'UMS_vIdeal.png')
    end
    
    % statistical filters (natural spectra)
    if VISonly == 1 || strcmp(animal, 'Habronattus')
        RGB(:,:,1)=allData{statistical3_nat};
        RGB(:,:,2)=allData{statistical2_nat};
        RGB(:,:,3)=allData{statistical1_nat};
        if strcmp(animal, 'Habronattus')
            imwrite(RGB, 'LMU_statistical_nat.png')
        else
            imwrite(RGB, 'LMS_statistical_nat.png')
        end
    else
        RGB(:,:,1)=allData{statistical1_nat};
        RGB(:,:,2)=allData{statistical3_nat};
        RGB(:,:,3)=allData{statistical2_nat};
        imwrite(RGB, 'UMS_statistical_nat.png')
    end  
    
    % statistical filters (chart1)
    if inclChart1 == 1
        if numChansChart1 == 3
            if VISonly == 1 || strcmp(animal, 'Habronattus')
                RGB(:,:,1)=allData{statistical3_chart1};
                RGB(:,:,2)=allData{statistical2_chart1};
                RGB(:,:,3)=allData{statistical1_chart1};
                if strcmp(animal, 'Habronattus')
                    imwrite(RGB, 'LMU_statistical_chart1.png')
                else
                    imwrite(RGB, 'LMS_statistical_chart1.png')
                end
            else
                RGB(:,:,1)=allData{statistical1_chart1};
                RGB(:,:,2)=allData{statistical3_chart1};
                RGB(:,:,3)=allData{statistical2_chart1};
                imwrite(RGB, 'UMS_statistical_chart1.png')
            end
        elseif numChansChart1 == 2
            RGB(:,:,1)=allData{statistical1_chart1};
            RGB(:,:,2)=allData{statistical2_chart1};
            RGB(:,:,3)=allData{statistical1_chart1};
            imwrite(RGB, 'SMS_statistical_chart1.png')
        end
    end
    
    % statistical filters (chart2)
    if inclChart2 == 1
        if VISonly == 1 || strcmp(animal, 'Habronattus')
            RGB(:,:,1)=allData{statistical3_chart2};
            RGB(:,:,2)=allData{statistical2_chart2};
            RGB(:,:,3)=allData{statistical1_chart2};
            if strcmp(animal, 'Habronattus')
                imwrite(RGB, 'LMU_statistical_chart2.png')
            else
                imwrite(RGB, 'LMS_statistical_chart2.png')
            end
        else
            RGB(:,:,1)=allData{statistical1_chart2};
            RGB(:,:,2)=allData{statistical3_chart2};
            RGB(:,:,3)=allData{statistical2_chart2};
            imwrite(RGB, 'UMS_statistical_chart2.png')
        end
    end

elseif chromacy == 2
    % virtual filters
    RGB(:,:,1)=allData{v1_ideal};
    RGB(:,:,2)=allData{v2_ideal};
    RGB(:,:,3)=allData{v1_ideal};
    imwrite(RGB, 'SMS_vIdeal.png')
    
    % statistical filters (natural spectra)
    RGB(:,:,1)=allData{statistical1_nat};
    RGB(:,:,2)=allData{statistical2_nat};
    RGB(:,:,3)=allData{statistical1_nat};
    imwrite(RGB, 'SMS_statistical_nat.png')
    
    % statistical filters (chart1)
    if inclChart1 == 1
        RGB(:,:,1)=allData{statistical1_chart1};
        RGB(:,:,2)=allData{statistical2_chart1};
        RGB(:,:,3)=allData{statistical1_chart1};
        imwrite(RGB, 'SMS_statistical_chart1.png')
    end
    
    % statistical filters (chart2)
    if inclChart2 == 1
        RGB(:,:,1)=allData{statistical1_chart2};
        RGB(:,:,2)=allData{statistical2_chart2};
        RGB(:,:,3)=allData{statistical1_chart2};
        imwrite(RGB, 'SMS_statistical_chart2.png')
    end

end

end