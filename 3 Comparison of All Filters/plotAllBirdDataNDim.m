function R2 = plotAllBirdDataNDim 
%% COMBINE DATA FROM ALL BIRD SPECIMEN IMAGES
% This function reads in the .mat files (within all of the working directory's subfolders) containing relative quantum catch, chroma, and color contrast data generated by the 'compareCustomComputStatNdim.m' script. 
% It then combines data from all bird images and plots it together in a single plot.
% The user only needs to specify one input parameter (see below).
% The function should be run within the directory containing all of the bird specimen images, i.e. 'Bird Specimen Images/'.
clear
close all
%% User-adjustable parameter:
colors = [0.8 0 1; 0 0.6 1; 0 0.8 0; 1 0 0]; %   colors for relative quantum catch scatter plots. Colors listed in order from shortest- to longest-wavelength peaking photoreceptor
%%
sz = 40;
%% q
q_16_files = dir('**/q_16.mat');
q_statistical_nat_files = dir('**/q_statistical_nat.mat');
q_statistical_chart1_files = dir('**/q_statistical_chart1.mat');
q_statistical_chart2_files = dir('**/q_statistical_chart2.mat');
q_reference1_files = dir('**/q_reference1.mat');

q16 = [];
qStatistical_nat = [];
qStatistical_chart1 = [];
qStatistical_chart2 = [];
qReference1 = [];

numBirds = numel(q_16_files);
N = zeros(numBirds,1);
for i = 1:numBirds
    load([q_16_files(i).folder, '/', q_16_files(i).name])
    q16 = horzcat(q16, q_16);
    load([q_statistical_nat_files(i).folder, '/', q_statistical_nat_files(i).name])
    qStatistical_nat = horzcat(qStatistical_nat, q_statistical_nat);
    load([q_statistical_chart1_files(i).folder, '/', q_statistical_chart1_files(i).name])
    qStatistical_chart1 = horzcat(qStatistical_chart1, q_statistical_chart1);
    load([q_statistical_chart2_files(i).folder, '/', q_statistical_chart2_files(i).name])
    qStatistical_chart2 = horzcat(qStatistical_chart2, q_statistical_chart2);
    load([q_reference1_files(i).folder, '/', q_reference1_files(i).name])
    qReference1 = horzcat(qReference1, q_reference1);
    N(i) = size(q_16,2); % number of selected pixels per bird
end
save('N.mat', 'N', '-mat')

% R-squared q
% reshape
q16_reshaped = reshape(q16, numel(q16), 1);
qStatistical_nat_reshaped = reshape(qStatistical_nat, numel(qStatistical_nat), 1);
qStatistical_chart1_reshaped = reshape(qStatistical_chart1, numel(qStatistical_chart1), 1);
qStatistical_chart2_reshaped = reshape(qStatistical_chart2, numel(qStatistical_chart2), 1);
qReference1_reshaped = reshape(qReference1, numel(qReference1), 1);
% run models
lm = fitlm(q16_reshaped, qStatistical_nat_reshaped);
R2.statNat.q = lm.Rsquared.Ordinary;
lm = fitlm(qReference1_reshaped, qStatistical_chart1_reshaped);
R2.statChart1.q = lm.Rsquared.Ordinary;
lm = fitlm(q16_reshaped, qStatistical_chart2_reshaped);
R2.statChart2.q = lm.Rsquared.Ordinary;

% plot q
numPatches = size(q16, 2);
numPhotorec = size(q16, 1);
numPhotorecChart1 = size(qReference1,1);
h = figure;
for s = 1:numPatches
    for i = 1:numPhotorec
        subplot(3,1,1)
        scatter(q16(i,s), qStatistical_nat(i,s), sz, '.', 'MarkerEdgeColor', colors(i,:))
        hold on

        subplot(3,1,2)
        if numPhotorec > numPhotorecChart1
            colorIndex = i + 1;
        else
            colorIndex = i;
        end
        if numPhotorec > numPhotorecChart1 && i == numPhotorec
        else
            scatter(qReference1(i,s), qStatistical_chart1(i,s), sz, '.', 'MarkerEdgeColor', colors(colorIndex,:))
            hold on
        end
        
        subplot(3,1,3)
        scatter(q16(i,s), qStatistical_chart2(i,s), sz, '.', 'MarkerEdgeColor', colors(i,:))
        hold on
    end
end

x = [0 1];
y = x;
for i = 1:3
    subplot(3,1,i)
    plot(x,y, 'k'); axis square
    xlim(x); ylim(x)
    xticks(0:0.2:x(2)); yticks(0:0.2:x(2))
end
set(gcf, 'Position', [1 600 240 645])
print('plot_q.png', '-dpng', '-r600')
savefig('plot_q.fig')
close(h)

%% CHROMA
chroma_16_files = dir('**/chroma16.mat');
chroma_statistical_nat_files = dir('**/chromaStatistical_nat.mat');
chroma_statistical_chart1_files = dir('**/chromaStatistical_chart1.mat');
chroma_statistical_chart2_files = dir('**/chromaStatistical_chart2.mat');
chroma_reference1_files = dir('**/chroma_reference1.mat');
chr16 = [];
chrStatistical_nat = [];
chrStatistical_chart1 = [];
chrStatistical_chart2 = [];
chrReference1 = [];

for i = 1:numel(chroma_16_files)
    load([chroma_16_files(i).folder, '/', chroma_16_files(i).name])
    chr16 = vertcat(chr16, chroma16);
    load([chroma_statistical_nat_files(i).folder, '/', chroma_statistical_nat_files(i).name])
    chrStatistical_nat = vertcat(chrStatistical_nat, chromaStatistical_nat);
    load([chroma_statistical_chart1_files(i).folder, '/', chroma_statistical_chart1_files(i).name])
    chrStatistical_chart1 = vertcat(chrStatistical_chart1, chromaStatistical_chart1);
    load([chroma_statistical_chart2_files(i).folder, '/', chroma_statistical_chart2_files(i).name])
    chrStatistical_chart2 = vertcat(chrStatistical_chart2, chromaStatistical_chart2);
    load([chroma_reference1_files(i).folder, '/', chroma_reference1_files(i).name])
    chrReference1 = vertcat(chrReference1, chroma_reference1);
end

% R-squared chroma
% run models
lm = fitlm(chr16, chrStatistical_nat);
R2.statNat.chroma = lm.Rsquared.Ordinary;
lm = fitlm(chrReference1, chrStatistical_chart1);
R2.statChart1.chroma = lm.Rsquared.Ordinary;
lm = fitlm(chr16, chrStatistical_chart2);
R2.statChart2.chroma = lm.Rsquared.Ordinary;

% chroma scatterplot
h = figure;
subplot(3,1,1)
scatter(chr16, chrStatistical_nat, sz, '.k')
hold on

subplot(3,1,2)
scatter(chrReference1, chrStatistical_chart1, sz, '.k')
hold on

subplot(3,1,3)
scatter(chr16, chrStatistical_chart2, sz, '.k')
hold on

x = [0 0.87];
y = x;
for i = 1:3
    subplot(3,1,i)
    plot(x,y, 'k'); axis square
    %xlim(x); ylim(x)
    xticks(0:0.2:x(2)); yticks(0:0.2:x(2))
end
set(gcf, 'Position', [1 600 240 645])
print('plot_chroma.png', '-dpng', '-r600')
savefig('plot_chroma.fig')
close(h)

%% COLOR CONTRAST
deltaS_16_files = dir('**/deltaS_16.mat');
deltaS_statistical_nat_files = dir('**/deltaS_statistical_nat.mat');
deltaS_statistical_chart1_files = dir('**/deltaS_statistical_chart1.mat');
deltaS_statistical_chart2_files = dir('**/deltaS_statistical_chart2.mat');
deltaS_reference1_files = dir('**/deltaS_reference1.mat');
dS16 = [];
dSStatisticalNat = [];
dSStatisticalChart1 = [];
dSStatisticalChart2 = [];
dSReference1 = [];

for i = 1:numel(deltaS_16_files)
    load([deltaS_16_files(i).folder, '/', deltaS_16_files(i).name])
    dS16 = vertcat(dS16, deltaS_16);
    load([deltaS_statistical_nat_files(i).folder, '/', deltaS_statistical_nat_files(i).name])
    dSStatisticalNat = vertcat(dSStatisticalNat, deltaS_statistical_nat);
    load([deltaS_statistical_chart1_files(i).folder, '/', deltaS_statistical_chart1_files(i).name])
    dSStatisticalChart1 = vertcat(dSStatisticalChart1, deltaS_statistical_chart1);
    load([deltaS_statistical_chart2_files(i).folder, '/', deltaS_statistical_chart2_files(i).name])
    dSStatisticalChart2 = vertcat(dSStatisticalChart2, deltaS_statistical_chart2);
    load([deltaS_reference1_files(i).folder, '/', deltaS_reference1_files(i).name])
    dSReference1 = vertcat(dSReference1, deltaS_reference1);
end

% R-squared color contrast
% run models
lm = fitlm(dS16, dSStatisticalNat);
R2.statNat.deltaS = lm.Rsquared.Ordinary;
lm = fitlm(dSReference1, dSStatisticalChart1);
R2.statChart1.deltaS = lm.Rsquared.Ordinary;
lm = fitlm(dS16, dSStatisticalChart2);
R2.statChart2.deltaS = lm.Rsquared.Ordinary;
disp(R2.statNat)
disp(R2.statChart1)
disp(R2.statChart2)
save('R2.mat', 'R2', '-mat')

% plot color contrast
h = figure;
subplot(3,1,1)
scatter(dS16, dSStatisticalNat, sz, '.k')
hold on

subplot(3,1,2)
scatter(dSReference1, dSStatisticalChart1, sz, '.k')
hold on

subplot(3,1,3)
scatter(dS16, dSStatisticalChart2, sz, '.k')
hold on

y = [0 1];
x = y;
for i = 1:3
    subplot(3,1,i)
    plot(x,y, 'k'); axis square
end

% subplot(3,1,1)
% xlim([0 .34]); ylim([0 .34])
% xticks(0:0.1:0.3); yticks(0:0.1:0.3)
% subplot(3,1,2)
% xlim([0 .96]); ylim([0 .96])
% xticks(0:0.3:0.9); yticks(0:0.3:0.9)
% subplot(3,1,3)
% xlim([0 .47]); ylim([0 .47])
% xticks(0:0.1:0.4); yticks(0:0.1:0.4)

set(gcf, 'Position', [1 600 240 645])
print('plot_deltaS.png', '-dpng', '-r600')
savefig('plot_deltaS.fig')
close(h)

end