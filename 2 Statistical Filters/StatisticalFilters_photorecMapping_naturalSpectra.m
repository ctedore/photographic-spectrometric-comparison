%% STATISTICAL FILTERS CONE MAPPING
% This script:
% 1) reads in the animal spectral sensitivities you want to simulate, which were saved to the appropriate directory by the 'computFilters.m' script
% 2) reads in the file of the irradiance spectrum to be simulated (Seric xenon lamp)
% 3) reads in the MICA toolbox's library of natural spectra 'Natural Spectra 300-700.csv'
% 4) reads in the effective spectral sensitivities of the computational filters of the Nikon D7000 camera converted for full-spectrum photography (computed and saved to the appropriate directory by
%     the 'computFilters_2.m' script)
% 5) calculates the relative quantum catches of the camera and of animal photoreceptors in response to each of the spectra in the above loaded training library
% 6) fits a linear model relating each photoreceptor relative quantum catch to all camera channel relative quantum catches
% 7) saves all linear models in a single .mat file
% The user must input the desired parameters in the 'User-adjustable parameters' section below (i.e., 'topDir', 'spectrumUsed', and 'animal').
% The script should be run from within the '2 Statistical Filters/' directory.
% If trainingSet = 'expanded', the script adds simulated natural spectra of different brightnesses to the training set.
clear
%% User-adjustable parameters:
topDir = ''; % specify full path of directory above the '2 Statistical Filters' directory
animal = 'UVSbird'; % use the 'animal' parameter from the 'computFilters_2.m' script
spectrumUsed = 'UVVIS'; % can be VIS or UVVIS
trainingSet = 'expanded'; % can be expanded or orig
greatTit = 0; % limit training to great tit plumage spectra

%%
gsRefl = 0.2;
animalSensFilename = [topDir, animal, '_idealizedSens300-780.mat']; % name of file containing idealized spectral sensitivities of animal
outputFilename = [animal, spectrumUsed, 'Mapping_naturalSpectra_', trainingSet, '.mat']; % name of mapping file to be generated by the script
% specify light source
fID = fopen([topDir, 'Seric_AbsoluteIrradiance_12-38-16-170.txt']); % Seric xenon lamp 
textscan(fID,'%f %f','HeaderLines',100);
data = textscan(fID,'%f %f',960);
fclose(fID);
lambda = (300:700).';
lightSource = interp1(data{1,1}, data{1,2}, lambda);
lightSource = 5.05E15 * lightSource .* lambda * 0.01;
% D65 = [0.000289444	0.003056904	0.005824364	0.008591824	0.011359284	0.014126744	0.016894204	0.019661664	0.022429124	0.025196584	0.027964044	0.042344159	0.056724273	0.071104387	0.085484501	0.09986419	0.114244729	0.128624419	0.143004957	0.157384647	0.171765185	0.186039622	0.200314909	0.214589346	0.228864632	0.243139069	0.257414355	0.271688792	0.285964078	0.300238516	0.314513802	0.316971107	0.31942926	0.321886565	0.32434387	0.326801175	0.329259328	0.331716633	0.334173938	0.336632092	0.339089397	0.343302041	0.347514684	0.351727328	0.355939972	0.360151767	0.364364411	0.368577055	0.372789699	0.377002343	0.381214987	0.382680881	0.384145927	0.385611822	0.387076868	0.388542763	0.390008658	0.391473704	0.392939599	0.394404645	0.39587054	0.400497403	0.405124266	0.40975028	0.414377143	0.419004006	0.42363087	0.428257733	0.432883747	0.43751061	0.442137473	0.440343089	0.438549554	0.436755169	0.434961634	0.43316725	0.431372865	0.42957933	0.427784946	0.42599141	0.424197026	0.428163515	0.432129155	0.436095644	0.440062133	0.444027773	0.447994262	0.451960751	0.45592724	0.45989288	0.463859369	0.487716871	0.511573524	0.535431026	0.559288528	0.583145181	0.607002682	0.630860184	0.654717686	0.678574339	0.702431841	0.7098428	0.71725376	0.72466472	0.73207568	0.73948664	0.746898448	0.754309408	0.761720368	0.769131328	0.776542288	0.778194072	0.779845856	0.781496792	0.783148576	0.78480036	0.786452144	0.788103928	0.789754864	0.791406648	0.793058432	0.787328965	0.781600346	0.775870879	0.770142261	0.764412793	0.758684175	0.752954708	0.747226089	0.741496622	0.735768003	0.751201915	0.766634978	0.782068889	0.797502801	0.812935864	0.828369776	0.843803687	0.859233355	0.874673208	0.890104573	0.900409126	0.910722168	0.921026721	0.931331274	0.941635827	0.951948868	0.962253421	0.972557974	0.982871015	0.993175568	0.993854616	0.994542152	0.9952212	0.995908736	0.996587784	0.997266832	0.997954368	0.998633416	0.999320952	1	0.997496011	0.994992021	0.992488032	0.989984042	0.987471565	0.984967576	0.982463586	0.979959597	0.977455607	0.974951618	0.975851356	0.976751095	0.977659322	0.97855906	0.979458799	0.980358537	0.981258276	0.982166503	0.983066241	0.98396598	0.977930941	0.971895902	0.965852375	0.959817336	0.953782297	0.947747258	0.94171222	0.935668693	0.929633654	0.923598615	0.924056972	0.924523818	0.924982175	0.925440532	0.92589889	0.926365735	0.926824093	0.92728245	0.927749296	0.928207653	0.926891997	0.925576342	0.924252198	0.922936543	0.921620888	0.920305232	0.918989577	0.917665433	0.916349778	0.915034122	0.912479204	0.909924286	0.90736088	0.904805962	0.902251044	0.899696126	0.897141208	0.894577802	0.892022884	0.889467966	0.891929515	0.894391064	0.896852613	0.899314162	0.901767222	0.904228771	0.90669032	0.909151869	0.911613418	0.914074967	0.91129087	0.908498285	0.905714189	0.902921604	0.900137507	0.897353411	0.894560826	0.891776729	0.888984144	0.886200048	0.885894476	0.885588904	0.885283333	0.884977761	0.88467219	0.884375106	0.884069535	0.883763963	0.883458391	0.88315282	0.879715139	0.876285947	0.872848267	0.869419075	0.865981394	0.862543714	0.859114521	0.855676841	0.852247649	0.848809968	0.845698231	0.842586494	0.839475605	0.836363868	0.833252131	0.830140393	0.827028656	0.823917767	0.82080603	0.817694293	0.817230842	0.816767392	0.816303093	0.815839643	0.815376193	0.814912742	0.814449292	0.813984993	0.813521543	0.813058093	0.807029844	0.801000747	0.794972499	0.788943401	0.782915153	0.776886905	0.770857807	0.764829559	0.758800462	0.752772213	0.753893491	0.755013921	0.756135199	0.757255628	0.758376906	0.759498184	0.760618613	0.761739891	0.76286032	0.763981598	0.763636132	0.763290667	0.762945201	0.762599735	0.762253421	0.761907955	0.761562489	0.761217024	0.760871558	0.760526092	0.758913354	0.757299766	0.755687027	0.754073439	0.7524607	0.750847961	0.749234373	0.747621635	0.746008047	0.744395308	0.740652056	0.736908804	0.733165552	0.7294223	0.725678199	0.721934947	0.718191695	0.714448443	0.710705191	0.706961939	0.7073108	0.707658812	0.708007673	0.708355685	0.708704546	0.709053407	0.709401419	0.70975028	0.710098292	0.710447153	0.707330323	0.704212644	0.701095814	0.697978135	0.694861305	0.691744474	0.688626795	0.685509965	0.682392286	0.679275456	0.679435032	0.679594608	0.679753336	0.679912912	0.680072488	0.680232065	0.680391641	0.680550368	0.680709945	0.680869521	0.682620616	0.684371711	0.686123655	0.68787475	0.689625845	0.69137694	0.693128035	0.694879978	0.696631073	0.698382168	0.694992021	0.691602723	0.688212576	0.684823278	0.681433131	0.678042984	0.674653686	0.671263539	0.66787424	0.664484093	0.657215734	0.649947374	0.642679014	0.635410654	0.628142295	0.620874784	0.613606424	0.606338064	0.599069704	0.591801345	0.593403898	0.595006451	0.596608155	0.598210709	0.599813262	0.601415815	0.603018368	0.604620073	0.606222626	0.607825179].';

trainSpec = readtable('Natural Spectra 300-700.csv'); % training spectra
trainSpec = table2array(trainSpec);
if greatTit == 1
    trainSpec = horzcat(trainSpec(:,1), trainSpec(:,2771:2843)); % limit to great tit spectra only
    outputFilename = [animal, spectrumUsed, 'Mapping_greatTitSpectra_', trainingSet, '.mat']; % name of mapping file to be generated by the script
end
if strcmp(trainingSet, 'expanded')
    trainSpec = cat(2, trainSpec, 0.001 * trainSpec(:, 2:end), 0.01 * trainSpec(:, 2:end), 0.1 * trainSpec(:, 2:end), 0.2 * trainSpec(:, 2:end));
end
load(animalSensFilename); % animal spectral sensitivities
idealizedSens = idealizedSens(1:401,:);
load('computNikonSens300-780.mat'); % spectral sensitivities of computational NikonD7000CoastalOpt60 filters
computNikon = computNikon(1:401,:);
if strcmp(spectrumUsed, 'VIS')
    lightSource = lightSource(101:end, :);
    trainSpec = trainSpec(101:end, :);
    idealizedSens = idealizedSens(101:end, :);
    computNikon = computNikon(101:end, :);
end

% calculate cone and camera relative quantum catches using reflectance spectrometry
numTrainSpec = size(trainSpec,2) - 1;
numPhotorec = size(idealizedSens, 2);
animal_q = zeros(numPhotorec, numTrainSpec);
camera_q = zeros(5, numTrainSpec);
for i = 2:numTrainSpec + 1
    for p = 1:numPhotorec
        animal_q(p,i-1) = sum(trainSpec(:,i) .* lightSource .* idealizedSens(:,p)) / sum(gsRefl * lightSource .* idealizedSens(:,p)); % calculates avian relative quantum catch from all training spectra 
    end
    for c = 1:5
        camera_q(c,i-1) = sum(trainSpec(:,i) .* lightSource .* computNikon(:,c)) / sum(gsRefl * lightSource .* computNikon(:,c)); % calculates camera channel relative quantum catch from all training spectra
    end
end
modelData = horzcat(animal_q.', camera_q.');
if numPhotorec == 4
    varNames = {'P1', 'P2', 'P3', 'P4', 'R', 'G', 'B', 'UB', 'UR'};
elseif numPhotorec == 3
    varNames = {'P1', 'P2', 'P3', 'R', 'G', 'B', 'UB', 'UR'};
elseif numPhotorec == 2
    varNames = {'P1', 'P2', 'R', 'G', 'B', 'UB', 'UR'};
end
modelData = array2table(modelData, "VariableNames", varNames); 

% 2-way interactions
if strcmp(spectrumUsed, 'VIS')
    effects = 'R*G + R*B + G*B';
else
    effects = 'R*G + R*B + R*UB + R*UR + G*B + G*UB + G*UR + B*UB + B*UR + UB*UR';
end
% 3-way interactions (works worse than 2-way)
% effects = 'R*G*B + R*G*UB + R*G*UR + R*B*UB + R*B*UR + R*UB*UR + G*B*UB + G*B*UR + G*UB*UR + B*UB*UR';
lm{1} = fitlm(modelData, ['P1 ~ ', effects]);
lm{2} = fitlm(modelData, ['P2 ~ ', effects]);
if numPhotorec > 2
    lm{3} = fitlm(modelData, ['P3 ~ ', effects]);
end
if numPhotorec > 3
    lm{4} = fitlm(modelData, ['P4 ~ ', effects]);
end
save(outputFilename, 'lm')
